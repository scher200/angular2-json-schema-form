export declare function buildSchemaFromLayout(layout: any): void;
export declare function buildSchemaFromData(data: any, requireAllFields?: boolean, isRoot?: boolean): any;
export declare function getFromSchema(schema: any, dataPointer: any, returnType?: string): any;
export declare function removeRecursiveReferences(pointer: any, recursiveRefMap: any, arrayMap?: Map<any, any>): any;
export declare function getInputType(schema: any, layoutNode?: any): any;
export declare function checkInlineType(controlType: any, schema: any, layoutNode?: any): any;
export declare function isInputRequired(schema: any, schemaPointer: any): any;
export declare function updateInputOptions(layoutNode: any, schema: any, jsf: any): void;
export declare function getTitleMapFromOneOf(schema?: any, flatList?: boolean, validateOnly?: boolean): any;
export declare function getControlValidators(schema: any): any;
export declare function resolveSchemaReferences(schema: any, schemaRefLibrary: any, schemaRecursiveRefMap: any, dataRecursiveRefMap: any, arrayMap: any): any;
export declare function getSubSchema(schema: any, pointer: any, schemaRefLibrary?: any, schemaRecursiveRefMap?: Map<string, string>, usedPointers?: string[]): any;
export declare function combineAllOf(schema: any): any;
export declare function fixRequiredArrayProperties(schema: any): any;
